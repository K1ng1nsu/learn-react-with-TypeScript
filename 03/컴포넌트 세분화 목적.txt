1. 컴포넌트 단순화 => 에러 가능성 낮추고, 디버깅과 테스트 용이

2. 컴포넌트 재사용성 증대 => 한 컴포넌트에 너무 많은 기능이 포함되면 재사용이 어려움
- UI와 기능이 모두 일치해야 재사용이 가능 => 기능별로 분리, UI별로 분리
=> 상태를 가진 컴포넌트와, 무상태 컴포넌트
=> 무상태 컴포넌트가 재사용성이 뛰어남
=> 상태는 부모 컴포넌트가 가지는 것이 좋음



3. 렌더링 성능 최적화 => 컴포넌트 단위로 렌더링 할지 여부를 결정


